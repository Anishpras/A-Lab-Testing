{"ast":null,"code":"export function OR(a, b) {\n  let c;\n\n  if (a === 1 && b === 1) {\n    return c = 1;\n  } else {\n    return c = a + b;\n  }\n}\nexport function NAND(a, b) {\n  let c;\n\n  if (a === 1 && b === 1) {\n    return c = 0;\n  } else {\n    return c = 1;\n  }\n}\nexport function NOR(a, b) {\n  let c;\n\n  if (a === 0 && b === 0) {\n    return c = 1;\n  } else {\n    return c = 0;\n  }\n}\nexport function XOR(a, b) {\n  let c;\n\n  if (a === 1 && b === 1) {\n    return c = 0;\n  } else {\n    return c = a + b;\n  }\n}\nexport function XNOR(a, b) {\n  let c;\n\n  if (a === b) {\n    return c = 1;\n  } else {\n    return c = 0;\n  }\n}\nexport function AND(a, b) {\n  let c = a * b;\n  return c;\n}","map":{"version":3,"sources":["/home/shubham/Projects/a-lab/Amity_Virtual_Lab-master/src/containers/logic.js"],"names":["OR","a","b","c","NAND","NOR","XOR","XNOR","AND"],"mappings":"AAAA,OAAO,SAASA,EAAT,CAAYC,CAAZ,EAAeC,CAAf,EAAkB;AACvB,MAAIC,CAAJ;;AACA,MAAIF,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAArB,EAAwB;AACtB,WAAQC,CAAC,GAAG,CAAZ;AACD,GAFD,MAEO;AACL,WAAQA,CAAC,GAAGF,CAAC,GAAGC,CAAhB;AACD;AACF;AAED,OAAO,SAASE,IAAT,CAAcH,CAAd,EAAiBC,CAAjB,EAAoB;AACzB,MAAIC,CAAJ;;AACA,MAAIF,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAArB,EAAwB;AACtB,WAAQC,CAAC,GAAG,CAAZ;AACD,GAFD,MAEO;AACL,WAAQA,CAAC,GAAG,CAAZ;AACD;AACF;AAED,OAAO,SAASE,GAAT,CAAaJ,CAAb,EAAgBC,CAAhB,EAAmB;AACxB,MAAIC,CAAJ;;AACA,MAAIF,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAArB,EAAwB;AACtB,WAAQC,CAAC,GAAG,CAAZ;AACD,GAFD,MAEO;AACL,WAAQA,CAAC,GAAG,CAAZ;AACD;AACF;AAED,OAAO,SAASG,GAAT,CAAaL,CAAb,EAAgBC,CAAhB,EAAmB;AACxB,MAAIC,CAAJ;;AACA,MAAIF,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAArB,EAAwB;AACtB,WAAQC,CAAC,GAAG,CAAZ;AACD,GAFD,MAEO;AACL,WAAQA,CAAC,GAAGF,CAAC,GAAGC,CAAhB;AACD;AACF;AAED,OAAO,SAASK,IAAT,CAAcN,CAAd,EAAiBC,CAAjB,EAAoB;AACzB,MAAIC,CAAJ;;AACA,MAAIF,CAAC,KAAKC,CAAV,EAAa;AACX,WAAQC,CAAC,GAAG,CAAZ;AACD,GAFD,MAEO;AACL,WAAQA,CAAC,GAAG,CAAZ;AACD;AACF;AAED,OAAO,SAASK,GAAT,CAAaP,CAAb,EAAgBC,CAAhB,EAAkB;AACrB,MAAIC,CAAC,GAAGF,CAAC,GAAGC,CAAZ;AACA,SAAOC,CAAP;AACH","sourcesContent":["export function OR(a, b) {\n  let c;\n  if (a === 1 && b === 1) {\n    return (c = 1);\n  } else {\n    return (c = a + b);\n  }\n}\n\nexport function NAND(a, b) {\n  let c;\n  if (a === 1 && b === 1) {\n    return (c = 0);\n  } else {\n    return (c = 1);\n  }\n}\n\nexport function NOR(a, b) {\n  let c;\n  if (a === 0 && b === 0) {\n    return (c = 1);\n  } else {\n    return (c = 0);\n  }\n}\n\nexport function XOR(a, b) {\n  let c;\n  if (a === 1 && b === 1) {\n    return (c = 0);\n  } else {\n    return (c = a + b);\n  }\n}\n\nexport function XNOR(a, b) {\n  let c;\n  if (a === b) {\n    return (c = 1);\n  } else {\n    return (c = 0);\n  }\n}\n\nexport function AND(a, b){\n    let c = a * b;\n    return c;\n}"]},"metadata":{},"sourceType":"module"}